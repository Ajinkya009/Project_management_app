{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/account.guard.ts","webpack:///src/app/account.service.ts","webpack:///src/app/account/account.component.ts","webpack:///src/app/account/account.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard.service.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/project-dialog/project-dialog.component.ts","webpack:///src/app/project-dialog/project-dialog.component.html","webpack:///src/app/project.service.ts","webpack:///src/app/project/project.component.ts","webpack:///src/app/project/project.component.html","webpack:///src/app/shared.service.ts","webpack:///src/app/task-dialog/task-dialog.component.ts","webpack:///src/app/task-dialog/task-dialog.component.html","webpack:///src/app/task.service.ts","webpack:///src/app/task/task.component.ts","webpack:///src/app/task/task.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AccountGuard","account","next","state","isLoggedIn","providedIn","AccountService","http","router","loggedInStatus","value","username","password","post","email","localStorage","getItem","AccountComponent","toastr","sharedService","loginForm","navigate","event","preventDefault","target","querySelector","loginUser","subscribe","data","hasOwnProperty","setItem","toggleHeader","err","Object","error","map","key","registerUser","login","selector","templateUrl","styleUrls","routes","AppRoutingModule","forRoot","imports","AppComponent","title","AppModule","path","component","canActivate","declarations","providers","bootstrap","DashboardService","auth_token","get","headers","Authorization","name","description","startDate","endDate","DashboardComponent","dashboardService","dialog","projects","displayedColumns","fetchAllProjects","open","createNewProject","HeaderComponent","logInFlag","loggedIn","removeItem","ProjectDialogComponent","dialogRef","close","save","ProjectService","projectId","assignee","project","projectData","put","ProjectComponent","projectService","taskService","route","location","tasks","snapshot","params","fetchProjectDetails","users","setUsers","detail","taskId","updateProject","success","back","SharedService","asObservable","flag","TaskDialogComponent","createNewTask","TaskService","taskData","TaskComponent","status","getUsers","fetchTaskDetails","updateTask","deleteTask","environment","production","bootstrapModule","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AccountService } from './account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountGuard implements CanActivate {\n\n  constructor(private account:AccountService){\n    //console.log(this.account.isLoggedIn);\n  }\n  \n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.account.isLoggedIn;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router'; \n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  private loggedInStatus = false;\n\n  constructor(private http:HttpClient, private router:Router) { }\n\n  setLoggedIn(value:boolean){\n    this.loggedInStatus = value;\n  }\n\n  get isLoggedIn(){\n    return localStorage.getItem('auth_token')!==null;\n  }\n\n  loginUser(username,password){\n    return this.http.post('/api/auth/login/',{\n      username:username,\n      password: password\n    });\n  }\n\n  registerUser(username,password,email){\n    return this.http.post('/api/auth/signup/',{\n      username:username,\n      password:password,\n      email:email\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../account.service';\nimport { SharedService } from '../shared.service';\nimport { Router } from '@angular/router';\nimport { HeaderComponent } from '../header/header.component';\nimport { error } from '@angular/compiler/src/util';\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n  loginForm : boolean = true;\n  constructor(private account:AccountService, private router:Router,private toastr: ToastrService, private sharedService:SharedService) { }\n\n  ngOnInit(): void {\n    if(localStorage.getItem('auth_token')!=null){\n      this.router.navigate(['dashboard']);\n    }\n  }\n\n  /** Login and redirect user to dashboard page */\n  loginUser(event){\n    event.preventDefault();\n    const target = event.target;\n    const username = target.querySelector(\"#username\").value;\n    const password = target.querySelector(\"#password\").value\n    this.account.loginUser(username,password).subscribe(data=>{\n      if(data.hasOwnProperty('auth_token')){\n        localStorage.setItem('auth_token',data['auth_token']);\n        this.sharedService.toggleHeader(true);\n        this.router.navigate(['dashboard']);\n      }\n    },(err:HttpErrorResponse)=>{\n      Object.keys(err.error).map(key=>{\n        this.toastr.error(err.error[key],key);\n      });\n      \n    });\n  }\n\n  registerUser(event){\n    event.preventDefault();\n    const target = event.target;\n    const username = target.querySelector(\"#username\").value;\n    const password = target.querySelector(\"#password\").value;\n    const email = target.querySelector(\"#email\").value;\n    this.account.registerUser(username,password,email).subscribe(data=>{\n      if(data.hasOwnProperty('auth_token')){\n        localStorage.setItem('auth_token',data['auth_token']);\n        this.sharedService.toggleHeader(true);\n        this.router.navigate(['dashboard']);\n      }\n    },(err:HttpErrorResponse)=>{\n      Object.keys(err.error).map(key=>{\n        this.toastr.error(err.error[key],key);\n      });\n    });\n  }\n\n  /** Toggle login/signup form */\n  toggleForm(login:boolean){\n    this.loginForm = login;\n  }\n\n}\n","<div class=\"login-page\">\n  <div class=\"form\">\n    <form *ngIf=\"!loginForm\" class=\"register-form\" (submit)=\"registerUser($event)\">\n      <input type=\"text\" placeholder=\"Userame\" id=\"username\"/>\n      <input type=\"password\" placeholder=\"Password\" id=\"password\"/>\n      <input type=\"text\" placeholder=\"Email address\" id=\"email\"/>\n      <button>create</button>\n      <p class=\"message\">Already registered? <a (click)=\"toggleForm(true)\">Sign In</a></p>\n    </form>\n    <form *ngIf=\"loginForm\" class=\"login-form\" (submit)=\"loginUser($event)\">\n      <input type=\"text\" placeholder=\"username\" id=\"username\"/>\n      <input type=\"password\" placeholder=\"password\" id=\"password\"/>\n      <button>login</button>\n      <p class=\"message\">Not registered? <a (click)=\"toggleForm(false)\">Create an account</a></p>\n    </form>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'taskManager';\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { AppRoutingModule } from './app-routing.module';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\n/*local components*/ \nimport { AppComponent } from './app.component';\nimport { AccountComponent } from './account/account.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AccountGuard } from './account.guard';\nimport { AccountService } from './account.service';\n\n\nimport { ToastrModule } from 'ngx-toastr';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './header/header.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatSelectModule} from '@angular/material/select';\nimport { ProjectDialogComponent } from './project-dialog/project-dialog.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule } from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport { ProjectComponent } from './project/project.component';\nimport { TaskDialogComponent } from './task-dialog/task-dialog.component';\nimport { TaskComponent } from './task/task.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AccountComponent,\n    DashboardComponent,\n    HeaderComponent,\n    ProjectDialogComponent,\n    ProjectComponent,\n    TaskDialogComponent,\n    TaskComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    NgbModule,\n    \n    //material modules\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatTableModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n\n    //toastr modules\n    BrowserAnimationsModule,\n    ToastrModule.forRoot(),\n\n    //router modules\n    RouterModule.forRoot([\n    {\n      path: 'login',\n      component: AccountComponent\n    },\n    {\n      path: 'dashboard',\n      component: DashboardComponent,\n      canActivate: [AccountGuard]\n    },\n    {\n      path: 'project/:projectId/task/:taskId',\n      component: TaskComponent,\n      canActivate: [AccountGuard]\n    },\n    {\n      path: 'project/:projectId',\n      component: ProjectComponent,\n      canActivate: [AccountGuard]\n    },\n    {\n      path: '',\n      component: AppComponent,\n    }\n    ])\n  ],\n  providers: [AccountService,AccountGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n  constructor(private http:HttpClient) {}\n\n  fetchAllProjects(){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.get('/api/project/',{headers:{Authorization:`Token ${auth_token}` }});\n  }\n\n  createNewProject(name,description,startDate,endDate){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.post('/api/project/',{\n      name:name,\n      description:description,\n      startDate:startDate,\n      endDate:endDate\n    },{headers:{Authorization:`Token ${auth_token}` }});\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { DashboardService } from '../dashboard.service';\nimport { Router } from '@angular/router';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { ProjectDialogComponent } from '../project-dialog/project-dialog.component';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  constructor(private dashboardService: DashboardService,private router:Router,private dialog: MatDialog) { }\n  projects: any = [];\n  displayedColumns: string[] = ['position', 'name', 'start date', 'end date'];\n  ngOnInit(): void {\n    \n    this.dashboardService.fetchAllProjects().subscribe((data)=>{\n        this.projects = data;\n    });\n    \n  }\n\n  createNewProject(){\n    this.dialog.open(ProjectDialogComponent);\n  }\n\n  openProject(id){\n    this.router.navigate([`project/${id}`]);\n  }\n\n}\n","<div class=\"dashboard\">\n    <div class=\"newProjectButtonDiv\">\n        <button class=\"newProjectButton\" mat-raised-button color=\"primary\" (click)=\"createNewProject()\">New Project</button>\n    </div>\n    <div *ngIf=\"projects.length>0\" class=\"dashboardTableDiv\">\n        <div class=\"mat-elevation-z8\">\n            <table mat-table [dataSource]=\"projects\">\n\n                <!-- Position Column -->\n                <ng-container matColumnDef=\"position\">\n                <th mat-header-cell *matHeaderCellDef> No. </th>\n                <td mat-cell *matCellDef=\"let element; let i=index;\"> {{i+1}} </td>\n                </ng-container>\n\n                <!-- Name Column -->\n                <ng-container matColumnDef=\"name\">\n                <th mat-header-cell *matHeaderCellDef > Name </th>\n                <td mat-cell *matCellDef=\"let element\" style=\"cursor:pointer\" (click)=\"openProject(element.id)\"> {{element.name}} </td>\n                </ng-container>\n\n                <!-- Start Date Column -->\n                <ng-container matColumnDef=\"start date\">\n                <th mat-header-cell *matHeaderCellDef> Start Date </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\n                </ng-container>\n\n                <!-- End Date Column -->\n                <ng-container matColumnDef=\"end date\">\n                <th mat-header-cell *matHeaderCellDef> End Date </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SharedService } from '../shared.service';\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  loggedIn: boolean;\n  constructor(private router:Router,private sharedService: SharedService) {\n   }\n\n  ngOnInit(): void {\n    this.sharedService.logInFlag.subscribe(loggedIn=>{\n      this.loggedIn = loggedIn;\n    });\n  }\n\n  logout(){\n    localStorage.removeItem('auth_token');\n    this.sharedService.toggleHeader(false);\n    this.router.navigate(['login']);\n  }\n\n}\n","<div *ngIf=\"loggedIn\">\n    <mat-toolbar color=\"primary\">\n        <span><a href=\"/dashboard\" style=\"text-decoration:none; color:inherit\">Task Management App</a></span>\n        <span class=\"fill-space\"></span>\n        <button mat-button (click)=\"logout()\">logout</button>\n    </mat-toolbar>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport { FormGroup } from '@angular/forms';\nimport { DashboardService } from '../dashboard.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-project-dialog',\n  templateUrl: './project-dialog.component.html',\n  styleUrls: ['./project-dialog.component.css']\n})\nexport class ProjectDialogComponent implements OnInit {\n    form: FormGroup;\n    name: string;\n    startDate: Date;\n    endDate: Date;\n    description: String;\n    constructor(private dialogRef: MatDialogRef<ProjectDialogComponent>,\n      private dashboardService:DashboardService,\n      private router: Router) {}\n\n    ngOnInit(): void {\n    }\n\n    save() {\n      this.dashboardService.createNewProject(\n        this.name,\n        this.description,\n        this.startDate,\n        this.endDate\n      ).subscribe(data=>{\n        this.router.navigate([`project/${data['id']}`]);\n      });\n      this.dialogRef.close();\n    }\n\n    close() {\n        this.dialogRef.close();\n    }\n\n}\n","<h2 mat-dialog-title>Create New Project</h2>\n\n<mat-form-field>\n      <mat-label>Project Name</mat-label>\n      <input matInput [(ngModel)]=\"name\">\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput [(ngModel)]=\"description\"></textarea>\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>Start Date</mat-label>\n      <input matInput type=\"date\" [(ngModel)]=\"startDate\">\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>End Date</mat-label>\n      <input matInput type=\"date\" [(ngModel)]=\"endDate\">\n</mat-form-field>\n\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\"(click)=\"close()\">Close</button>\n    \n    <button class=\"mat-raised-button mat-primary\"(click)=\"save()\">Save</button>\n</mat-dialog-actions>","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  constructor(private router:Router, private http:HttpClient) { }\n\n  fetchProjectDetails(projectId){\n    const auth_token = localStorage.getItem('auth_token')\n    return this.http.get(`/api/project/${projectId}`,{headers:{Authorization:`Token ${auth_token}`}});\n  }\n\n  createNewTask(name,description,startDate,endDate,assignee,projectId){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.post(`/api/project/${projectId}/task/`,{\n      name:name,\n      description:description,\n      startDate:startDate,\n      endDate:endDate,\n      assignee:assignee,\n      project:projectId\n    },{headers:{Authorization:`Token ${auth_token}` }});\n  }\n\n  updateProject(projectData){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.put(`/api/project/${projectData.id}/`,projectData,{headers:{Authorization:`Token ${auth_token}`}});\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../project.service';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TaskDialogComponent } from '../task-dialog/task-dialog.component';\nimport { TaskService } from '../task.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { projectDetails } from '../interfaces/projectDetails';\nimport {Location} from '@angular/common';\n\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.css']\n})\nexport class ProjectComponent implements OnInit {\n  tasks: any = [];\n  projectData : projectDetails; \n  users: [];\n  displayedColumns: string[] = ['position', 'name', 'start date', 'end date','assignee'];\n  constructor(private projectService:ProjectService,\n    private taskService: TaskService,\n    private toastr: ToastrService, \n    private router:Router,\n    private route:ActivatedRoute,\n    private dialog: MatDialog,\n    private location: Location\n    ) { }\n\n  ngOnInit(): void {\n    let projectId = this.route.snapshot.params['projectId'];\n    localStorage.setItem('projectId',projectId);\n    this.projectService.fetchProjectDetails(projectId).subscribe((data:projectDetails)=>{\n      this.projectData = data['project'];\n      this.users = data['users'];\n      this.taskService.setUsers(this.users);\n      this.tasks = this.projectData.tasks;\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n      this.router.navigate(['dashboard']);\n    });\n  }\n\n  createNewTask(){\n    this.dialog.open(TaskDialogComponent,{data:{users:this.users}});\n  }\n\n  openTask(taskId){\n    let projectId = this.projectData.id;\n    this.router.navigate([`project/${projectId}/task/${taskId}`]);\n  }\n\n  updateProject(){\n    this.projectService.updateProject(this.projectData).subscribe((data)=>{\n      this.toastr.success('Success!', 'Updated task successfully!');\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n    });\n  }\n\n  back(){\n    this.location.back();\n  }\n\n  \n\n}\n","<div class=\"dashboard\">\n    <mat-grid-list cols=\"2\">\n        <mat-grid-tile>\n                <div class=\"projectDetailsDiv\">\n                    <mat-form-field appearance=\"outline\" class=\"name\">\n                        <mat-label>Project Name</mat-label>\n                        <input matInput [(ngModel)]=\"projectData.name\">\n                    </mat-form-field>\n                    <br/>\n                    <mat-form-field appearance=\"outline\" class=\"description\">\n                        <mat-label>Description</mat-label>\n                        <textarea rows=10 matInput [(ngModel)]=\"projectData.description\"></textarea>\n                    </mat-form-field>\n                    <br/>\n                    <mat-form-field appearance=\"outline\" class=\"startDate\">\n                        <mat-label>Start Date</mat-label>\n                        <input matInput type=\"date\" [(ngModel)]=\"projectData.startDate\">\n                    </mat-form-field>\n                    \n                    <mat-form-field appearance=\"outline\" class=\"endDate\">\n                        <mat-label>End Date</mat-label>\n                        <input matInput type=\"date\" [(ngModel)]=\"projectData.endDate\">\n                    </mat-form-field>\n                    <br/>\n                    <button class=\"mat-raised-button\" (click)=\"back()\">Close</button>\n                    <button class=\"mat-raised-button save mat-primary\" (click)=\"updateProject()\">Update</button>\n                </div>\n        </mat-grid-tile>\n        <mat-grid-tile>\n            <div>\n            </div>\n            <br/>\n            <div *ngIf=\"tasks.length>0\" class=\"dashboardTableDiv\">\n                <button class=\"newProjectButton\" mat-raised-button color=\"primary\" (click)=\"createNewTask()\" >New task</button>\n                <div class=\" example-container mat-elevation-z8\">\n                    <table mat-table [dataSource]=\"tasks\">\n\n                        <!-- Position Column -->\n                        <ng-container matColumnDef=\"position\">\n                        <th mat-header-cell *matHeaderCellDef> No. </th>\n                        <td mat-cell *matCellDef=\"let element; let i=index;\"> {{i+1}} </td>\n                        </ng-container>\n\n                        <!-- Name Column -->\n                        <ng-container matColumnDef=\"name\">\n                        <th mat-header-cell *matHeaderCellDef > Name </th>\n                        <td mat-cell *matCellDef=\"let element\" style=\"cursor:pointer\" (click)=\"openTask(element.id)\"> {{element.name}} </td>\n                        </ng-container>\n\n                        <!-- Start Date Column -->\n                        <ng-container matColumnDef=\"start date\">\n                        <th mat-header-cell *matHeaderCellDef> Start Date </th>\n                        <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\n                        </ng-container>\n\n                        <!-- End Date Column -->\n                        <ng-container matColumnDef=\"end date\">\n                        <th mat-header-cell *matHeaderCellDef> End Date </th>\n                        <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\n                        </ng-container>\n\n                        <!-- Assignee Column -->\n                        <ng-container matColumnDef=\"assignee\">\n                        <th mat-header-cell *matHeaderCellDef> Assignee </th>\n                        <td mat-cell *matCellDef=\"let element\"> {{users[element.assignee-1][0]}} </td>\n                        </ng-container>\n\n                        <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n                        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                    </table>\n                </div>\n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n  private loggedIn = new BehaviorSubject(localStorage.getItem('auth_token')!==null);\n  logInFlag = this.loggedIn.asObservable();\n  constructor() { }\n\n  toggleHeader(flag){\n    this.loggedIn.next(flag);\n  }\n}\n","import { Component, OnInit,Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport { FormGroup } from '@angular/forms';\nimport { ProjectService } from '../project.service';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-task-dialog',\n  templateUrl: './task-dialog.component.html',\n  styleUrls: ['./task-dialog.component.css']\n})\nexport class TaskDialogComponent implements OnInit {\n  form: FormGroup;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  description: String;\n  assignee: String;\n  constructor(private dialogRef: MatDialogRef<TaskDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private projectService:ProjectService,\n    private router: Router,\n    private route:ActivatedRoute,\n    private toastr: ToastrService\n    ) {}\n\n  ngOnInit(): void {\n    \n  }\n\n  save(){\n    let projectId = localStorage.getItem('projectId');\n    this.projectService.createNewTask(this.name,this.description,this.startDate,this.endDate,this.assignee,projectId).subscribe((data)=>{\n      const taskId = data['id'];\n      this.dialogRef.close();\n      this.router.navigate([`project/${projectId}/task/${taskId}`]);\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n    });\n  }\n\n  close(){\n    this.dialogRef.close();\n  }\n\n}\n","<h2 mat-dialog-title>Create New Task</h2>\n\n<mat-form-field>\n      <mat-label>Task Name</mat-label>\n      <input matInput [(ngModel)]=\"name\">\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput [(ngModel)]=\"description\"></textarea>\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>Start Date</mat-label>\n      <input matInput type=\"date\" [(ngModel)]=\"startDate\">\n</mat-form-field>\n<br/>\n<mat-form-field>\n      <mat-label>End Date</mat-label>\n      <input matInput type=\"date\" [(ngModel)]=\"endDate\">\n</mat-form-field>\n<br/>\n<mat-form-field>\n    <mat-select placeholder=\"Assignee\" [(ngModel)]=\"assignee\">\n        <mat-option *ngFor=\"let user of data.users\" [value]=\"user[1]\">\n        {{ user[0] }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\"(click)=\"close()\">Close</button>\n    \n    <button class=\"mat-raised-button mat-primary\"(click)=\"save()\">Save</button>\n</mat-dialog-actions>","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  users:[];\n  constructor(private router:Router, private http:HttpClient) { }\n\n  fetchTaskDetails(projectId,taskId){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.get(`/api/project/${projectId}/task/${taskId}`,{headers:{Authorization:`Token ${auth_token}`}});\n  }\n\n  updateTask(taskData){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.put(`/api/project/${taskData.project}/task/${taskData.id}/`,taskData,{headers:{Authorization:`Token ${auth_token}`}});\n  }\n\n  deleteTask(projectId,taskId){\n    const auth_token = localStorage.getItem('auth_token');\n    return this.http.delete(`/api/project/${projectId}/task/${taskId}`,{headers:{Authorization:`Token ${auth_token}`}});\n  }\n\n  setUsers(users){\n    this.users = users;\n  }\n\n  getUsers(){\n    return this.users;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { taskDetails } from '../interfaces/taskDetails';\nimport { TaskService } from '../task.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute } from '@angular/router';\nimport {Location} from '@angular/common';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\n\nexport class TaskComponent implements OnInit {\n  taskData: taskDetails = {\n    name: \"\",\n    assignee: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    description: \"\",\n    id: 0,\n    status: false,\n    project: 1\n  };\n  users:[];\n  constructor(private taskService: TaskService,\n    private router:Router,\n    private toastr:ToastrService,\n    private route:ActivatedRoute,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void {\n    let projectId = this.route.snapshot.params['projectId'];\n    let taskId = this.route.snapshot.params['taskId'];\n    this.users = this.taskService.getUsers();\n    this.taskService.fetchTaskDetails(projectId,taskId).subscribe((data:taskDetails)=>{\n      this.taskData = data;\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n      this.router.navigate(['dashboard']);\n    });\n  }\n\n  updateTask(){\n    \n    this.taskService.updateTask(this.taskData).subscribe((data)=>{\n      this.toastr.success('Success!', 'Updated task successfully!');\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n      \n    });\n  }\n\n  back(){\n    this.location.back();\n  }\n\n  deleteTask(){\n    this.taskService.deleteTask(this.taskData.project,this.taskData.id).subscribe((data)=>{\n      this.location.back();\n      this.toastr.success('Success!', 'Deleted task successfully!');\n    },(err:HttpErrorResponse)=>{\n      this.toastr.error('Error!', err.error.detail);\n      \n    });\n  }  \n\n}\n","<div class=\"taskDetailsDiv\">\n    <mat-form-field appearance=\"outline\" class=\"name\">\n        <mat-label>Task Name</mat-label>\n        <input matInput [(ngModel)]=\"taskData.name\">\n    </mat-form-field>\n    <br/>\n    <mat-form-field appearance=\"outline\" class=\"description\">\n        <mat-label>Description</mat-label>\n        <textarea rows=10 matInput [(ngModel)]=\"taskData.description\"></textarea>\n    </mat-form-field>\n    <br/>\n    <mat-form-field appearance=\"outline\" class=\"startDate\">\n        <mat-label>Start Date</mat-label>\n        <input matInput type=\"date\" [(ngModel)]=\"taskData.startDate\">\n    </mat-form-field>\n    \n    <mat-form-field appearance=\"outline\" class=\"endDate\">\n        <mat-label>End Date</mat-label>\n        <input matInput type=\"date\" [(ngModel)]=\"taskData.endDate\">\n    </mat-form-field>\n    <br/>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Assignee</mat-label>\n        <mat-select placeholder=\"Assignee\" [(ngModel)]=\"taskData.assignee\">\n            <mat-option *ngFor=\"let user of users\" [value]=\"user[1]\">\n                {{ user[0] }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n    <mat-slide-toggle [checked]=\"taskData.status\" [(ngModel)]=\"taskData.status\">Status</mat-slide-toggle>\n    <br/>\n    <button class=\"mat-raised-button\" (click)=\"back()\">Close</button>\n    <button class=\"mat-raised-button save mat-primary\" (click)=\"updateTask()\">Update</button>\n    <button class=\"mat-raised-button save mat-warn\" (click)=\"deleteTask()\">Delete</button>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}